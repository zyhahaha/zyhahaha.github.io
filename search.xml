<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>云手机</title>
    <url>/cloud-phone.html</url>
    <content><![CDATA[<p>现在的手机大多数<strong>无法Root</strong>，对于有这方面需求的使用者来说有什么可以替代的办法呢。</p>
<p>我在<strong>另外一篇文章</strong>里介绍了<strong>VMOS虚拟机</strong>来达到同样的目的。</p>
<p>今天我介绍另一种可能：<br><strong>云手机</strong>，它与虚拟机大同小异，都是在ARM硬件之上虚拟化一个操作系统出来。</p>
<a id="more"></a>
<h5 id="云手机与虚拟机的差异："><a href="#云手机与虚拟机的差异：" class="headerlink" title="云手机与虚拟机的差异："></a>云手机与虚拟机的差异：</h5><p>虚拟机需要运行在手机上，手机关机即停止。而云手机类似云服务器一样，运行在别人的服务器之上，我们安装在手机上的实际是客户端，手机关机，云手机还会继续运行。</p>
<p>相应的因为云手机需要<strong>依赖第三方硬件</strong>，所以它是<strong>收费</strong>的，而虚拟机运行在自己手机上，它只需要你提供<strong>存储空间</strong>和<strong>电量</strong>即可。</p>
<p>市面上大多数云手机都有Root权限，对于有这方面需求的用户这是一种选择。</p>
<p>而云手机24小时运行的特性，所以它对标的应用场景大多数都与自动脚本有关：</p>
<p>比如<strong>游戏辅助脚本</strong>、<strong>自动刷视频</strong>、<strong>自动做任务平台</strong>等。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/cloud-phone/game.jpg" alt="云手机"></p>
<p>这篇文章主要作为抛砖引玉，更多玩法各位可以自己探索。</p>
<p>想要使用云手机的可以到百度自行搜索，因为是收费的，所以这里没有软件推荐。</p>
<p>非要推荐的话我可以推荐一下<strong>移动云手机</strong>、<strong>唔即云云手机</strong>，推荐理由是它们都有免费试用时长。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/cloud-phone/10086.jpg" alt="移动云手机"></p>
]]></content>
      <categories>
        <category>个人爱好</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>DHT</title>
    <url>/dht.html</url>
    <content><![CDATA[<p>一直很好奇那些资源站、磁力链接网站是怎么做到这么多资源的，经过一番专研，我自建了一个磁力链接网站，这里给大家分享一下它是怎么实现的。<br>经过这篇文章的讲解，大家也可以搭建属于自己的<strong>磁力链接网站</strong>。</p>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ol>
<li>至少一台linux服务器（<em>最好两台</em>）</li>
<li>Mysql数据库（<em>磁力链接数据库</em>）</li>
<li>安装Nodejs、Npm（<em>Nodejs &gt;= 10</em>）</li>
<li>需安装qbittorrent（<em>用于解析磁力链接内容</em>）</li>
</ol>
<h3 id="代码已开源"><a href="#代码已开源" class="headerlink" title="代码已开源"></a>代码已开源</h3><ol>
<li>DHT仓库：<a href="https://github.com/zyhahaha/DHT" target="_blank" rel="noopener">https://github.com/zyhahaha/DHT</a></li>
<li>磁力链接前端：<a href="https://github.com/zyhahaha/AppMe" target="_blank" rel="noopener">https://github.com/zyhahaha/AppMe</a></li>
</ol>
<a id="more"></a>
<h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>首先简述一下实现磁力链接网站的大概思路：</p>
<ol>
<li>加入DHT网络获取磁力链接hash</li>
<li>把磁力链接hash存入数据库</li>
<li>解析磁力链接获得BT种子，把磁力链接内容存入数据库</li>
<li>搭建前端页面提供磁力链接的查询</li>
</ol>
<h3 id="加入DHT网络获取磁力链接"><a href="#加入DHT网络获取磁力链接" class="headerlink" title="加入DHT网络获取磁力链接"></a>加入DHT网络获取磁力链接</h3><p>直接下载这个代码，开箱即用：<a href="https://github.com/zyhahaha/DHT" target="_blank" rel="noopener">https://github.com/zyhahaha/DHT</a><br><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/dht/github.jpg" alt="Github仓库"></p>
<p>下面说一下调用方式。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> spider = <span class="keyword">new</span> (<span class="built_in">require</span>(<span class="string">'./lib/spider'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里直接把磁力链接打印出来</span></span><br><span class="line">spider.on(<span class="string">'ensureHash'</span>, (hash, addr)=&gt; <span class="built_in">console</span>.log(<span class="string">`magnet:?xt=urn:btih:<span class="subst">$&#123;hash&#125;</span>`</span>))</span><br><span class="line"></span><br><span class="line">spider.listen(<span class="number">6339</span>)</span><br></pre></td></tr></table></figure></p>
<h3 id="把磁力链接hash存入数据库"><a href="#把磁力链接hash存入数据库" class="headerlink" title="把磁力链接hash存入数据库"></a>把磁力链接hash存入数据库</h3><p>这一步是最简单的一步，因为我的后端代码包含一些敏感信息就没有开源，大家自己搭建一个后端，提供基础的增删改查功能，用于保存磁力链接数据。</p>
<p>这里我推荐用<strong>Nestjs</strong>作为后端框架，感兴趣的可以看我<strong>另外一篇文章</strong>：<a href="https://zyhahaha.github.io/nestjs.html">https://zyhahaha.github.io/nestjs.html</a></p>
<p>我们只需要保存<strong>ensureHash</strong>事件返回的hash即可：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">spider.on(<span class="string">'ensureHash'</span>, (hash, addr)=&gt; &#123;</span><br><span class="line">  <span class="comment">// 保存磁力链接到数据库</span></span><br><span class="line">  saveHash(<span class="string">`magnet:?xt=urn:btih:<span class="subst">$&#123;hash&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h3 id="通过磁力链接获取种子"><a href="#通过磁力链接获取种子" class="headerlink" title="通过磁力链接获取种子"></a>通过磁力链接获取种子</h3><p>只有磁力链接我们就可以通过一些软件下载资源了，但是如果我们要做一个磁力链接网站，在查询时要知道这个磁力链接的资源内容，资源大小等信息。<br>这个时候我们就需要把磁力链接转为种子，种子内包含这些信息。</p>
<p>那么如何获取种子呢，这里就需要用到qbittorrent，可以用它通过磁力链接来下载种子。<br><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/dht/qbittorrent.png" alt="qbittorrent"></p>
<p>通过qbittorrent下载种子，获取磁力链接内容，实现自动化下载、获取、存入数据库。<br>市面上有这么多磁力链接下载软件，我为啥选择<strong>qbittorrent</strong>呢，因为qbittorrent提供了所有操作的<strong>Web Api</strong>，我们可以用脚本调用Web Api来自动下载资源、获取资源内容、删除已经下好的任务。<br>具体代码在parse-hash-v2文件夹内：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> parse-hash-v2</span><br><span class="line"></span><br><span class="line">node index.js</span><br></pre></td></tr></table></figure></p>
<p>简述各脚本的用处：</p>
<ol>
<li>query-remote-hash-list.js <em>获取数据库内的磁力链接</em></li>
<li>add-hash.js <em>把磁力链接添加入qbittorrent任务</em></li>
<li>query-local-hash-list.js <em>获取qbittorrent内下载完成的任务</em></li>
<li>update-remote-hash.js <em>把上一步获取的种子内容更新到数据库中</em></li>
<li>delete-hash.js <em>删除已经处理的磁力链接任务</em></li>
</ol>
<h3 id="数据就绪提供客户端用于浏览"><a href="#数据就绪提供客户端用于浏览" class="headerlink" title="数据就绪提供客户端用于浏览"></a>数据就绪提供客户端用于浏览</h3><p>程序跑了一会慢慢数据就来了，我这个程序跑了<strong>10天左右</strong>，总数据已经有<strong>400多万</strong>，已解析的数据也有78万左右（<em>解析比较慢</em>）。</p>
<p>现在有了数据，我们需要提供一个前端页面来显示我们的成果，可以是一个网页，也可以是一个App。</p>
<p>这里我用<strong>React Native</strong>写了一个App，<strong>已开源</strong>。感兴趣的开源下载代码改巴改巴自己用。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/dht/frontend-v2.jpg" alt="客户端"></p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3>]]></content>
      <categories>
        <category>个人爱好</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Debian</title>
    <url>/debian.html</url>
    <content><![CDATA[<p>在家里看一些电影，很多片源都是从网上下载的，我一开始是使用windows开启网络共享，然后通过电视网络访问。但是每次看电影都需要先打开我的电脑。<br>于是我想把电影资源都放到一台专门的主机上，不说24小时开机，用的时候开机即可。<br>由于我日常使用的服务器发行版是Debian AND Ubuntu，家里的服务器也就安装该发行版，下面专门对它进行简单的介绍：</p>
<h3 id="Debian"><a href="#Debian" class="headerlink" title="Debian"></a>Debian</h3><p>官网：<a href="https://www.debian.org/" target="_blank" rel="noopener">https://www.debian.org/</a><br>安装手册：<a href="https://www.debian.org/releases/bullseye/amd64/index.zh-cn.html" target="_blank" rel="noopener">https://www.debian.org/releases/bullseye/amd64/index.zh-cn.html</a></p>
<a id="more"></a>
<h3 id="最低硬件要求"><a href="#最低硬件要求" class="headerlink" title="最低硬件要求"></a>最低硬件要求</h3><p>CPU：1核1GHz、21世纪的CPU<br>无桌面系统：内存512MB、硬盘2GB<br>桌面系统：内存1GB、硬盘10GB<br>这配置基本上99%的电脑都可以安装，如果是特殊设备刷机（机顶盒、路由器等）可以自行查看debian安装手册</p>
<h3 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h3><p>制作启动盘的软件推荐使用Rufus或UltraISO，然后到Debian官网下载ISO镜像，具体操作网上有很多，我这里就介绍一下关键词。</p>
<h3 id="更新系统时间"><a href="#更新系统时间" class="headerlink" title="更新系统时间"></a>更新系统时间</h3><p>Debian安装成功后需要校正时间，否则访问网络会有一点点问题。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">date <span class="comment"># 查看当前的系统时间</span></span><br><span class="line">sudo apt-get update <span class="comment"># 更新源</span></span><br><span class="line">sudo apt-get install ntpdate <span class="comment"># 安装ntpdate</span></span><br><span class="line">sudo ntpdate ntp1.aliyun.com <span class="comment"># 更新系统时间</span></span><br></pre></td></tr></table></figure></p>
<h3 id="添加sudo"><a href="#添加sudo" class="headerlink" title="添加sudo"></a>添加sudo</h3><p>系统安装后默认是没有sudo的，需要自行安装。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install sudo</span><br><span class="line">sudo usermod -aG sudo zhaoyang <span class="comment"># zhaoyang为自己的用户名</span></span><br></pre></td></tr></table></figure></p>
<h3 id="使用手机USB共享网络"><a href="#使用手机USB共享网络" class="headerlink" title="使用手机USB共享网络"></a>使用手机USB共享网络</h3><p>我有一台小主机的电容被弄掉了，导致网口不能用，主板上的无线网卡也有点问题，本来打算放弃的。某天手机给windows电脑共享网络的时候，想起来通过USB应该也可以给Linux主机共享网络。<br>参考博客：<a href="https://blog.csdn.net/ROSEBUD7_K/article/details/126092515" target="_blank" rel="noopener">https://blog.csdn.net/ROSEBUD7_K/article/details/126092515</a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一步：查看网络配置</span></span><br><span class="line">ip addr <span class="comment"># 输出看看有没有usb相关的网络信息，如：usb0</span></span><br><span class="line"><span class="comment"># 第二步：为网络接口分配IP地址</span></span><br><span class="line">dhclient usb0</span><br><span class="line"><span class="comment"># 第三部：确认网络接口，usb0已分配IP地址代表配置成功</span></span><br></pre></td></tr></table></figure></p>
<h3 id="限制CPU"><a href="#限制CPU" class="headerlink" title="限制CPU"></a>限制CPU</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update; sudo apt-get install -y cpulimit</span><br><span class="line">sudo cpulimit -e xmrig -l 75 -b</span><br></pre></td></tr></table></figure>
<h3 id="跑分"><a href="#跑分" class="headerlink" title="跑分"></a>跑分</h3><p>安装必要程序<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install -y git make automake gcc autoconf time perl</span><br></pre></td></tr></table></figure></p>
<p>运行脚本<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/kdlucas/byte-unixbench.git</span><br><span class="line"><span class="built_in">cd</span> byte-unixbench/UnixBench</span><br><span class="line">make &amp;&amp; ./Run</span><br></pre></td></tr></table></figure></p>
<h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><p>Github地址：<a href="https://github.com/FunctionClub/ZBench" target="_blank" rel="noopener">https://github.com/FunctionClub/ZBench</a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#中文版：</span></span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/ZBench/master/ZBench-CN.sh &amp;&amp; bash ZBench-CN.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#英文版：</span></span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/ZBench/master/ZBench.sh &amp;&amp; bash ZBench</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>个人爱好</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>可道云kodbox私有云网盘（NAS软件）</title>
    <url>/kodbox.html</url>
    <content><![CDATA[<p>有些数据存放在第三方网盘里不放心（<em>百度云之类</em>）想用家里的电脑搭建一个自己的私有网盘。<br>或者觉得第三方网盘访问速度太慢（<em>比如百度云</em>）就算开了会员，受带宽限制还是不够快，而家里的局域网理论带宽能达到千兆级。<br>本文介绍<strong>可道云kodbox</strong>作为家庭NAS的一种方案。</p>
<p>适用场景：</p>
<ol>
<li>私有云网盘；</li>
<li>NAS家庭存储；</li>
</ol>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul>
<li>Docker</li>
<li>DockerHub <a href="https://hub.docker.com/r/kodcloud/kodbox" target="_blank" rel="noopener">https://hub.docker.com/r/kodcloud/kodbox</a></li>
<li>可运行Docker的计算机一台</li>
</ul>
<a id="more"></a>
<h3 id="安装开始"><a href="#安装开始" class="headerlink" title="安装开始"></a>安装开始</h3><p><strong>可道云kodbox</strong>基于PHP，数据库使用的是Mysql，用户可以自己装安装PHP、Mysql环境来进行安装，也可以通过Docker快速安装。<br>这里介绍Docker的安装流程（Docker安装比较简单，不需要安装环境）：</p>
<h4 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br></pre></td></tr></table></figure>
<h4 id="拉取Docker镜像并启动"><a href="#拉取Docker镜像并启动" class="headerlink" title="拉取Docker镜像并启动"></a>拉取Docker镜像并启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /data</span><br><span class="line">docker run -d -p 80:80 -v /data:/var/www/html kodcloud/kodbox</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>个人爱好</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux挂载新硬盘</title>
    <url>/hard-disk.html</url>
    <content><![CDATA[<p>现在大多数开发者都会选择把自己的程序部署到云服务器上，用云服务器让我们免去了安装操作系统、增减配置、日常运维等工作。但如果你是一个热爱这个行业，并且喜欢折腾的人，你一定会希望有一台属于自己的<a href="https://zyhahaha.github.io/debian.html">实体服务器</a>。作为一台服务器增加配置是常事，换CPU就不说了，麻烦！加内存就简单一点，插上就行！这里我们重点说说加硬盘怎么弄，直接插上是肯定不行的o_o ….插上之后需要<em>分区、格式化、挂载</em>，我们的程序才能使用这块硬盘。<br>下面我们一步一步来配置：</p>
<h3 id="查看硬盘状况"><a href="#查看硬盘状况" class="headerlink" title="查看硬盘状况"></a>查看硬盘状况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="建立挂载硬盘路径"><a href="#建立挂载硬盘路径" class="headerlink" title="建立挂载硬盘路径"></a>建立挂载硬盘路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir /data</span><br></pre></td></tr></table></figure>
<h3 id="硬盘格式化（-dev-sdb不是固定写法，是第一步命令查看到的新硬盘Device名）"><a href="#硬盘格式化（-dev-sdb不是固定写法，是第一步命令查看到的新硬盘Device名）" class="headerlink" title="硬盘格式化（/dev/sdb不是固定写法，是第一步命令查看到的新硬盘Device名）"></a>硬盘格式化（/dev/sdb不是固定写法，是第一步命令查看到的新硬盘Device名）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkfs.ext4  /dev/sdb</span><br></pre></td></tr></table></figure>
<h3 id="使用fdisk建立硬盘分区表、进行分区"><a href="#使用fdisk建立硬盘分区表、进行分区" class="headerlink" title="使用fdisk建立硬盘分区表、进行分区"></a>使用fdisk建立硬盘分区表、进行分区</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo fdisk /dev/sdb</span><br></pre></td></tr></table></figure>
<p>输入p，查看当前的分区表<br>分别输入g、p重建为gpt分区表<br>分别输入n、1、w创建新分区（将整个硬盘划分为单独的一个分区）<br>查看分区是否有效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file /dev/sdb</span><br></pre></td></tr></table></figure>
<h3 id="分区生效后再次进行硬盘格式化"><a href="#分区生效后再次进行硬盘格式化" class="headerlink" title="分区生效后再次进行硬盘格式化"></a>分区生效后再次进行硬盘格式化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkfs.ext4  /dev/sdb</span><br></pre></td></tr></table></figure>
<h3 id="使用mount命令挂在硬盘到新建文件夹"><a href="#使用mount命令挂在硬盘到新建文件夹" class="headerlink" title="使用mount命令挂在硬盘到新建文件夹"></a>使用mount命令挂在硬盘到新建文件夹</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mount /dev/sdb /data</span><br></pre></td></tr></table></figure>
<h3 id="配置-etc-fstab-文件，使重启时也可以自动挂载"><a href="#配置-etc-fstab-文件，使重启时也可以自动挂载" class="headerlink" title="配置 /etc/fstab 文件，使重启时也可以自动挂载"></a>配置 /etc/fstab 文件，使重启时也可以自动挂载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">echo</span> <span class="string">'/dev/sdb  /data   ext4    defaults    0   0'</span> &gt;&gt; /etc/fstab</span><br></pre></td></tr></table></figure>
<p>修改路径权限<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod -R 777 /data</span><br><span class="line">sudo chown -R 777 /data</span><br></pre></td></tr></table></figure></p>
<h3 id="挂载NFS网络硬盘"><a href="#挂载NFS网络硬盘" class="headerlink" title="挂载NFS网络硬盘"></a>挂载NFS网络硬盘</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nfs-common</span><br><span class="line">mount -t nfs -o vers=3,nolock 10.187.128.183:/64fc2ca4-2d2a-4152-a97f-bee2df87d9f5 /mnt</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/qq_37358732/article/details/107568654" target="_blank" rel="noopener">https://blog.csdn.net/qq_37358732/article/details/107568654</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Promise个人理解</title>
    <url>/javascript-promise.html</url>
    <content><![CDATA[<p>JavaScript Promise正确用法及其常见的错误用法。</p>
<a id="more"></a>
<p>未完待续，有时间再写</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>高通410随身wifi刷机debian</title>
    <url>/410.html</url>
    <content><![CDATA[<p>一直对小型Linux机器有需求，用过Mini小主机、电视盒子，手机Termux，发现对性能要求不高的场景高通410的随身wifi就挺合适。<br>于是几块钱薅了几个，捯饬了一下刷机，这里记录一下。</p>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul>
<li>高通410随身wifi（JZ02_V10）</li>
<li>Windows电脑一台</li>
</ul>
<h3 id="刷机软件"><a href="#刷机软件" class="headerlink" title="刷机软件"></a>刷机软件</h3><ul>
<li>Miko工具</li>
<li>9008免签名驱动（部分设备需要）</li>
</ul>
<p>以上软件可以在我公众号内（赵小福）留言：<strong>410刷机工具</strong>，来获取。</p>
<h3 id="debian镜像"><a href="#debian镜像" class="headerlink" title="debian镜像"></a>debian镜像</h3><p>在我公众号内（赵小福）留言：<strong>410 debian镜像</strong>，来获取，会给你个移动云盘的地址。</p>
<a id="more"></a>
<h3 id="一、原系统备份"><a href="#一、原系统备份" class="headerlink" title="一、原系统备份"></a>一、原系统备份</h3><ol>
<li>进入高通9008端口模式</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb reboot edl</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/410/adb9008.png" alt="进入高通9008端口模式"></p>
<p>用卡针顶住随身wifi的Reset孔不松，插入电脑USB，放开卡针也可进入9008端口模式</p>
<ol start="2">
<li>打开Miko（Loader.exe）</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/410/backup.png" alt="备份镜像"></p>
<h3 id="二、开始刷机"><a href="#二、开始刷机" class="headerlink" title="二、开始刷机"></a>二、开始刷机</h3><p>下载debian刷机镜像，开始刷机。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/410/flash.png" alt="刷入镜像"></p>
<p>进度到100%之后，刷机其实已经好了。但是有个问题，我们的电脑怎么连接到随身wifi的debian系统呢。</p>
<h3 id="三、配置驱动"><a href="#三、配置驱动" class="headerlink" title="三、配置驱动"></a>三、配置驱动</h3><p>当刷机成功后，设备这里会出现名为HandsomeMod Device的设备。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/410/internet.png" alt="HandsomeMod"></p>
<p>这里重点是<strong>基于远程 NDIS 的 Internet 共享设备</strong>的驱动，想办法把这个驱动装上后windows会识别到一个网络。<br>使用ipconfig即可知道随身wifi的ip，那么ssh连接！默认账号密码为：user  1</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/410/linux.png" alt="linux"></p>
<p>这里可以看到机器的配置是：512MB内存，4GB外存</p>
<h3 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h3><p>SSH连接Linux后需要配置wifi后才能连接上互联网，这里使用<strong>nmtui</strong>配置，连接一下无线网。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/410/wifi.png" alt="wifi"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/410/password.png" alt="password"></p>
<p>配置完成</p>
]]></content>
      <categories>
        <category>个人爱好</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Termux（在手机上运行Linux服务器）</title>
    <url>/linux-phone.html</url>
    <content><![CDATA[<h3 id="安装Termux-运行Linux安装脚本"><a href="#安装Termux-运行Linux安装脚本" class="headerlink" title="安装Termux 运行Linux安装脚本"></a>安装Termux 运行Linux安装脚本</h3><p>Termux下载地址：<a href="https://f-droid.org/packages/com.termux/" target="_blank" rel="noopener">https://f-droid.org/packages/com.termux/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装ssh</span></span><br><span class="line">apt update</span><br><span class="line">apt install openssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看用户名（ssh端口默认8022）</span></span><br><span class="line">whoami</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将sshd服务在开启termux时就启动</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"sshd"</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Termux熄屏仍然保持运行</span></span><br><span class="line">termux-wake-unlock</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">. &lt;(curl -L gitee.com/mo2/linux/raw/2/2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Linux发行版</span></span><br><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure>
<p>剩下的自由发挥<br>注意：<br>1、手机没有root要选择proot容器</p>
<p>参考博客：<a href="https://blog.dreamfall.cn/post/termux-xmr/" target="_blank" rel="noopener">https://blog.dreamfall.cn/post/termux-xmr/</a></p>
<h3 id="编译-C3-xmrig"><a href="#编译-C3-xmrig" class="headerlink" title="编译 C3-xmrig"></a>编译 C3-xmrig</h3><p>进入 Ubuntu<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在Termux终端输入命令，启动Ubuntu</span></span><br><span class="line">debian</span><br></pre></td></tr></table></figure></p>
<p>安装依赖<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install git build-essential cmake libuv1-dev libssl-dev libhwloc-dev -y</span><br></pre></td></tr></table></figure></p>
<p>克隆代码<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/C3Pool/xmrig-C3.git</span><br></pre></td></tr></table></figure></p>
<p>去除抽水率<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim xmrig-C3/src/donate.h</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把1改为0</span></span><br><span class="line">constexpr const int kDefaultDonateLevel = 1</span><br><span class="line">constexpr const int kMinimumDonateLevel = 1</span><br></pre></td></tr></table></figure>
<p>编译安装<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir xmrig-C3/build &amp;&amp; <span class="built_in">cd</span> xmrig-C3/build &amp;&amp; cmake .. &amp;&amp; make -j$(nproc) &amp;&amp; mv xmrig ~ &amp;&amp; <span class="built_in">cd</span> ~ &amp;&amp; rm -rf xmrig-C3</span><br></pre></td></tr></table></figure></p>
<p>启动Xmrig<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./xmrig -u 422x5HQKsFpRPi6UF7J9ngESkU1FBVzFVUVTgz4jDm6P6nDezgzMXujW7Wjt6QWWSTMy5sQx63YvG9gWoMCWMrLxBKTx3Qo -o  auto.c3pool.org:19999 -p termuxZ -a cn-pico</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台运行</span></span><br><span class="line">nohup ./xmrig -u 422x5HQKsFpRPi6UF7J9ngESkU1FBVzFVUVTgz4jDm6P6nDezgzMXujW7Wjt6QWWSTMy5sQx63YvG9gWoMCWMrLxBKTx3Qo -o  auto.c3pool.org:19999 -p termuxZ -a cn-pico &amp;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Deploy（在手机上运行Linux服务器）</title>
    <url>/linux-deploy.html</url>
    <content><![CDATA[<p>十年来，<strong>智能手机发展极为迅速</strong>，某些手机厂商的旗舰手机<em>一年一迭代</em>，<strong>手机淘汰速度完全跟不上</strong>。现在华为手机都已经发布<strong>P60</strong>了，我还在用<strong>P20</strong>，而我手机才买了不到三年（<em>有点舍不得换，毕竟还没用三年</em>）。这么快的淘汰速度，相应的各位家里应该有不少明明都好好的，但是已经不用的手机吧（<em>我家里有5台不用的手机，还好好的</em>）。这些手机扔了可惜，卖了不值钱，而且还怕被人盗取信息。</p>
<p>作为一名<strong>勤俭节约</strong>、<strong>充满好奇</strong>、<strong>愿意折腾</strong>的开发者，找到了一个有意思的用途：<strong>把旧手机作为一台低功耗服务器</strong>。</p>
<p>那要怎么做呢，首先，安装一个软件即可：<a href="https://github.com/meefik/linuxdeploy" target="_blank" rel="noopener">Linux Deploy</a>，这款软件只支持安卓手机，不支持IOS，那IOS用户怎么办：请<strong>以旧换新</strong>，还是很划算的。</p>
<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p>Github：<a href="https://github.com/meefik/linuxdeploy" target="_blank" rel="noopener">https://github.com/meefik/linuxdeploy</a><br>Android APP下载地址：<a href="https://github.com/meefik/linuxdeploy/releases/tag/2.3.0" target="_blank" rel="noopener">https://github.com/meefik/linuxdeploy/releases/tag/2.3.0</a></p>
<a id="more"></a>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><p>一台已Root的安卓手机，<a href="https://termux.dev/en/" target="_blank" rel="noopener">无Root条件，请用Termux</a></p>
<p>下面就以我这台八年前的手机为例：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/linux-deploy/linux-deploy-phone.jpeg" alt="华为G750"></p>
<p>通过上面的相关链接下载app，安装打开后页面是这样的</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/linux-deploy/linux-deploy-default.jpeg" alt="软件界面"></p>
<p>点击<strong>右下角图标</strong>进入以下配置界面，配置需要安装的<strong>Linux发行版、镜像大小、用户名密码</strong>、最下面有个开启<strong>SSH服务</strong>一定要勾选，不然没法远程访问（截图没截到，往下翻就看到了）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/linux-deploy/linux-deploy-config.jpeg" alt="配置界面"></p>
<p>通过一系列的配置、安装（<em>安装时间可能要十几分钟到半个小时</em>）后，点击<strong>启动</strong>按钮，出现以下页面代码启动成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/linux-deploy/linux-deploy-start.jpeg" alt="启动成功"></p>
<p>之后可以通过电脑SSH远程访问手机服务器</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/linux-deploy/linux-deploy-ssh.jpg" alt="MobaXterm"><br><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/linux-deploy/linux-deploy-df.jpg" alt="查看服务器配置"><br><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/linux-deploy/linux-deploy-cpu.jpg" alt="查看服务器CPU"></p>
<p>8核、2GB内存、2GB硬盘，硬盘有点小，可以挂载SD卡扩展空间（<em>可以看到df -h后，有一个sdcard1的30GB空间可用</em>），有时间我会细说一下怎么挂载SD卡。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>大家安装的时候看好版本，Android版本跟软件版本要对应上，低版本的系统用不了高版本的软件，反之亦然。</p>
<p>安装这个软件<strong>系统需要ROOT</strong>⊙﹏⊙∥，如果无法ROOT的话，只能用另外一个替代方案了：<a href="https://termux.dev/en/" target="_blank" rel="noopener">Termux</a></p>
<!-- ![Termux](https://termux.dev/assets/globals/home/htop_framed.png) -->
<p>有时间我会写一下Termux相关的教程，由于不需要ROOT相对而言Termux肯定在权限方面是不如<strong>Linux Deploy</strong>，不过作为一台Web服务器还是够的。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Nestjs个人理解</title>
    <url>/nestjs.html</url>
    <content><![CDATA[<p>作为<strong>前端开发人员</strong>，应该很多人都知道<strong>Nodejs</strong>，也有想用Nodejs写后台项目的，我估计有很多人写着写着最终也就放弃了，然后会说：<em>Nodejs不适合写Web服务端项目</em>。<strong>事实并不是这样</strong>，他们用Nodejs写后台项目，大多数用到框架可能是：<em>Koa、Express、Eggjs、Koa2、Fastify</em>。这一类框架只是提供了最基础的底座，想完成一个成熟的项目，需要在上面添加很多东西，所以写着写着就烦了。</p>
<p>用<strong>JavaScript</strong>写后端项目有两大难点：<strong>弱类型语言、相关生态不成熟</strong>。弱类型语言会导致编写大型项目时代码难以把控，生态不够成熟会导致项目越写越累，需要到处找轮子，而且各种轮子质量参差不齐，没法像<strong>Java Sprint</strong>一样拿来一把梭。<br>现在我推荐一下<a href="https://docs.nestjs.com/" target="_blank" rel="noopener">Nestjs</a>，它支持<a href="https://www.tslang.cn/index.html" target="_blank" rel="noopener">Typescript</a>编写代码，完美解决JS的弱类型问题，而且生态很健全，项目中需要用到的大多数工具都可以在@nestjs中找到。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -g @nestjs/cli</span><br><span class="line">nest new project-name</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>我目前写的项目也是用的Nestjs，这里我专门把<em>业务代码</em>抽离出去，剩下的作为<a href="https://github.com/zyhahaha/e-shop-backend-nest" target="_blank" rel="noopener">项目模板</a>开源出来，感兴趣的可以看一下。<br>这个模板项目可以让小白了解以下几个知识点：</p>
<ul>
<li>Redis连接及基础操作；</li>
<li>Mysql连接及基础操作；</li>
<li>Mongodb连接及基础操作；</li>
<li>Websockets；</li>
<li>log4js日志处理；</li>
<li>邮件通知、七牛云对象存储操作；</li>
<li>通过代码自动生成Swagger接口文档；</li>
<li>基础的注册登录，JWT跨域认证解决方案（<em>一种基于 Token 的认证授权机制</em>）；</li>
<li>通过阿里云SDK修改DNS解析地址；</li>
</ul>
<h3 id="PM2开机自启"><a href="#PM2开机自启" class="headerlink" title="PM2开机自启"></a>PM2开机自启</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动项目</span></span><br><span class="line">pm2 start xxxx</span><br><span class="line"><span class="comment"># 保存pm2程序配置</span></span><br><span class="line">pm2 save</span><br><span class="line"><span class="comment"># 生成开机自启动服务</span></span><br><span class="line">pm2 startup</span><br><span class="line"><span class="comment"># 开机服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> pm2-root</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>未完待续，有时间再写</p>
]]></content>
  </entry>
  <entry>
    <title>Linux环境比特币安装（Debian 11 OR Ubuntu18）</title>
    <url>/bitcoin.html</url>
    <content><![CDATA[<p>现在才玩比特币属于<strong>高位接盘</strong>，但是并不妨碍我们了解它，不求赚钱，只为了满足一下好奇心。</p>
<p>那么怎么玩？首先我们要有个钱包吧，之前国内有各种交易平台，并不需要我们安装钱包就能交易，但是现在基本已经关停，而且钱包攥在别人手里，各位心里不难受吗。</p>
<p>那为什么钱包要安装到Linux系统里呢，因为bitcoin钱包很大，有多大？下面会说。而且要联网同步节点，第一次运行钱包的时候，要开机联网同步数据，具体时间看你电脑性能。</p>
<p>以我的<strong>4核4G内存5MB带宽</strong>的云服务器为例：跑了大概有两天多才把数据同步完。如果你安装到你的Windows10上，你电脑要开机两天两夜，而且同步节点时会占用CPU，这两天这台电脑使用起来都不痛快，<br>最最最主要的是会占用你宝贵的硬盘空间o_o …</p>
<p>话不多说下面开始教一下大家怎么安装钱包：<br><strong>个人观点：</strong> <em>比特币、以太坊、门罗币等虚拟货币我觉得水太深，各位小白别玩，但是它们的区块链技术，我觉得很可能是互联网的未来，至少是未来的一部分</em></p>
<a id="more"></a>
<h3 id="安装bitcoin钱包-（v0-21-0）"><a href="#安装bitcoin钱包-（v0-21-0）" class="headerlink" title="安装bitcoin钱包 （v0.21.0）"></a>安装bitcoin钱包 （v0.21.0）</h3><p>安装bitcoincore全节点需要400GB的硬盘空间，如果硬盘空间不足可以安装bitcoincore轻节点，如何选择全节点还是轻节点在后面会说。<br>使用轻节点需要大约7GB的硬盘空间</p>
<ol>
<li><p>下载bitcoin<br><a href="https://bitcoincore.org/en/download/" target="_blank" rel="noopener">https://bitcoincore.org/en/download/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://bitcoincore.org/bin/bitcoin-core-0.21.0/bitcoin-0.21.0-x86_64-linux-gnu.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载解压后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xzf bitcoin-0.21.0-x86_64-linux-gnu.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用图形界面安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo install -m 0755 -o root -g root -t /usr/<span class="built_in">local</span>/bin bitcoin-0.21.0/bin/*</span><br><span class="line"></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/bitcoin-qt</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装完成，开始同步区块（这个时候可以关闭GUI程序，剩下的使用命令行操作）</p>
</li>
</ol>
<h3 id="bitcoin配置"><a href="#bitcoin配置" class="headerlink" title="bitcoin配置"></a>bitcoin配置</h3><ol>
<li>bitcoin的默认配置目录为 ~/.bitcoin/bitcoin.conf，填写以下配置<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~/.bitcoin/bitcoin.conf</span></span><br><span class="line">datadir=/opt/btc/datadir</span><br><span class="line"><span class="comment"># 设置数据库缓存大小</span></span><br><span class="line">dbcache=10240</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交易索引 txindex=1就代表全节点 不填写就是轻节点</span></span><br><span class="line"><span class="comment"># txindex=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启修剪模式 (https://bitcoin.org/en/full-node#reduce-storage)</span></span><br><span class="line">prune=10240</span><br><span class="line"></span><br><span class="line"><span class="comment"># rpc访问的user</span></span><br><span class="line">rpcuser=zhaoyang</span><br><span class="line"></span><br><span class="line"><span class="comment"># rpc访问的password</span></span><br><span class="line">rpcpassword=zy980355088</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台运行</span></span><br><span class="line">daemon=1</span><br><span class="line">server=1</span><br><span class="line">rest=1</span><br><span class="line"></span><br><span class="line">rpcbind=0.0.0.0:8332</span><br><span class="line">rpcallowip=0.0.0.0/0</span><br><span class="line">deprecatedrpc=accounts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 闪电网络需要下面两行配置的支持</span></span><br><span class="line"><span class="comment"># 允许在本机端口28332上广播原始区块信息</span></span><br><span class="line">zmqpubrawblock=tcp://127.0.0.1:28332</span><br><span class="line"><span class="comment"># 允许在本机端口28333上广播原始交易信息</span></span><br><span class="line">zmqpubrawtx=tcp://127.0.0.1:28333</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="命令使用说明"><a href="#命令使用说明" class="headerlink" title="命令使用说明"></a>命令使用说明</h3><p>启动bitcoin<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitcoind -daemon</span><br></pre></td></tr></table></figure></p>
<p>关闭bitcoin，一定要用以下命令，否则会有可能导致数据异常，需要重新同步数据<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitcoin-cli stop</span><br></pre></td></tr></table></figure></p>
<p>一些其他命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建钱包</span></span><br><span class="line">bitcoin-cli createwallet <span class="string">"zhaoyang"</span></span><br><span class="line"><span class="comment"># 生成钱包地址</span></span><br><span class="line">bitcoin-cli getnewaddress <span class="string">"test"</span>  <span class="comment">#"test"是输入的账号label</span></span><br><span class="line"><span class="comment"># 获取所有钱包地址及其账号名</span></span><br><span class="line">bitcoin-cli listreceivedbyaddress 1 <span class="literal">true</span></span><br><span class="line"><span class="comment"># 查看网络状态：</span></span><br><span class="line">bitcoin-cli getnetworkinfo</span><br><span class="line"><span class="comment"># 查看网络节点：</span></span><br><span class="line">bitcoin-cli getpeerinfo</span><br><span class="line"><span class="comment"># 查看区块链信息：如同步进度、</span></span><br><span class="line">bitcoin-cli getblockchaininfo</span><br><span class="line"><span class="comment"># 查看所有命令</span></span><br><span class="line">bitcoin-cli <span class="built_in">help</span></span><br></pre></td></tr></table></figure></p>
<p>启动后钱包会自动同步区块，可以打开日志查看具体同步情况<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail -f nohup.out</span><br></pre></td></tr></table></figure></p>
<p>进入bitcoin安装目录<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/.bitcoin</span><br><span class="line">ls</span><br><span class="line">banlist.dat  bitcoind.pid  blocks  chainstate  debug.log  peers.dat  wallets</span><br><span class="line">ls wallets/</span><br><span class="line">database  db.log  wallet.dat</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitcoind.pid bitcoind   运行的进程文件</span><br><span class="line"> </span><br><span class="line">blocks  区块链数据文件</span><br><span class="line"> </span><br><span class="line">chainstate 区块链状态的数据库使用LevelDB存储</span><br><span class="line"> </span><br><span class="line">db.log 数据库日志文件</span><br><span class="line"> </span><br><span class="line">debug.log 运行时的日志文件</span><br><span class="line"> </span><br><span class="line">wallet.dat 钱包文件（这个要划重点了，此文件保存了我们钱包生成的私钥，特别重要，建议通过编写shell脚本或者使用后台程序每天做个备份）</span><br></pre></td></tr></table></figure>
<p>钱包命令介绍<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitcoin-cli getwalletinfo   查看钱包详情，在0.18版本中，以前的getinfo已经取消</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"walletname"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"walletversion"</span>: 169900,              钱包版本</span><br><span class="line">  <span class="string">"balance"</span>: 0.00000000,                钱包余额</span><br><span class="line">  <span class="string">"unconfirmed_balance"</span>: 0.00000000,    未确认余额</span><br><span class="line">  <span class="string">"immature_balance"</span>: 0.00000000,       这个暂时还不清楚</span><br><span class="line">  <span class="string">"txcount"</span>: 0,                         钱包内交易数量</span><br><span class="line">  <span class="string">"keypoololdest"</span>: 1562826486,          密钥池内最早密钥创建时间</span><br><span class="line">  <span class="string">"keypoolsize"</span>: 1000,                  密钥池大小</span><br><span class="line">  <span class="string">"keypoolsize_hd_internal"</span>: 1000,</span><br><span class="line">  <span class="string">"paytxfee"</span>: 0.00000000,               手续费率（这个比较重要，后面单独讲）</span><br><span class="line">  <span class="string">"hdseedid"</span>: <span class="string">"ed13b2019c2e28e9dc84cf7124ba2e36cebcb656"</span>,</span><br><span class="line">  <span class="string">"private_keys_enabled"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">bitcoin-cli getblockchaininfo   查看区块详情</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"chain"</span>: <span class="string">"main"</span>,</span><br><span class="line">  <span class="string">"blocks"</span>: 238558,                     钱包当前区块（btc安装启动后一般1-2天可以同步到最新区块高度）</span><br><span class="line">  <span class="string">"headers"</span>: 584893,                    当前最新区块高度</span><br><span class="line">  ....  后面还有其他信息，我们暂不关注</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">bitcoin-cli sendtoaddress   转账接口（后面具体介绍）</span><br><span class="line">Response:</span><br><span class="line">1. <span class="string">"address"</span>            (string, required) 接收地址</span><br><span class="line">2. <span class="string">"amount"</span>             (numeric or string, required) 转账金额</span><br><span class="line"> </span><br><span class="line">Result:</span><br><span class="line"><span class="string">"txid"</span>                  (string) 唯一标识tx_id</span><br><span class="line"> </span><br><span class="line">Examples:</span><br><span class="line">&gt; bitcoin-cli sendtoaddress <span class="string">"bc1q7wuvm9q4s0gr9mtqtn2wamjx0462hg43g8h8ak"</span> 0.1</span><br><span class="line">&gt; curl --user myusername --data-binary <span class="string">'&#123;"jsonrpc": "1.0", "id":"curltest", "method": "sendtoaddress", "params": ["bc1q7wuvm9q4s0gr9mtqtn2wamjx0462hg43g8h8ak", 0.1] &#125;'</span> -H <span class="string">'content-type: text/plain;'</span> http://127.0.0.1:8332/</span><br></pre></td></tr></table></figure></p>
<h3 id="Github地址"><a href="#Github地址" class="headerlink" title="Github地址"></a>Github地址</h3><p><a href="https://github.com/bitcoin/bitcoin" target="_blank" rel="noopener">https://github.com/bitcoin/bitcoin</a></p>
<h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a href="https://bitcoincore.org/en/download/" target="_blank" rel="noopener">https://bitcoincore.org/en/download/</a></p>
<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://bitcoincore.org/bin/" target="_blank" rel="noopener">https://bitcoincore.org/bin/</a></p>
<h3 id="门罗币"><a href="#门罗币" class="headerlink" title="门罗币"></a>门罗币</h3><ol>
<li>官网（下载钱包）：<a href="https://www.getmonero.org/downloads/" target="_blank" rel="noopener">https://www.getmonero.org/downloads/</a></li>
<li>下载挖矿程序：<a href="https://github.com/xmrig/xmrig/releases" target="_blank" rel="noopener">https://github.com/xmrig/xmrig/releases</a></li>
<li>矿池：mine.c3pool.com:13333</li>
</ol>
]]></content>
      <tags>
        <tag>BTC</tag>
      </tags>
  </entry>
  <entry>
    <title>旧手机再利用（Android）</title>
    <url>/old-phone.html</url>
    <content><![CDATA[<p>旧手机再利用<br>参考：<a href="https://xiaoyi.vc/phone-diy.html" target="_blank" rel="noopener">https://xiaoyi.vc/phone-diy.html</a></p>
<p>摄像头：<a href="http://iriun.com/" target="_blank" rel="noopener">http://iriun.com/</a></p>
<p>第二屏幕：<a href="https://www.spacedesk.net/#download" target="_blank" rel="noopener">https://www.spacedesk.net/#download</a></p>
]]></content>
      <categories>
        <category>个人爱好</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>PCDN</title>
    <url>/pcdn.html</url>
    <content><![CDATA[<p><strong>PCDN</strong>（<em>P2P CDN</em>）P2P内容分发网络，看名字大概能猜到是干嘛的。常规的CDN服务主要是大公司在做，使用遍布全国的CDN服务器提供静态资源访问服务。阿里云有提供PCDN这种服务的，感兴趣可以看一下<a href="https://help.aliyun.com/product/54287.html" target="_blank" rel="noopener">阿里云PCDN</a>。</p>
<p><strong>想象一下这种场景：</strong> 你家邻居在家里看腾讯视频，这个视频一般来说可能是存储在腾讯服务器上的，如果很多人同时看这个视频，腾讯的服务器是不是很有压力（<em>主要是硬盘读取压力和带宽压力</em>）。</p>
<p>而且如果这个服务器离你家还很远，是不是除了服务器压力之外，带宽传输是不是也是一种浪费。这个时候如果你家里的电脑，做CDN节点，预先把这个视频缓存到你电脑上，当你附近有人访问这个资源，优先从你电脑上访问，是不是就不用浪费厂商的服务器资源了。</p>
<p>但是我们<strong>为什么要这么做</strong>呢，肯定是要别人给钱，我才愿意做这个CDN节点，我用的是<strong>网心云</strong>（<em>纯属爱好，随便玩玩</em>），下面讲一下它怎么部署：</p>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><p>首先你要有个服务器（<em>也就是电脑，闲置的云服务器也行</em>）、Docker的基本用法；</p>
<p><strong>个人观点：</strong> <em>这个也就是玩玩，别指望它赚多少钱。用自己电脑做CDN节点，一方面要24小时开机，费电、费硬盘、占网络</em>；</p>
<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>本文不是教你赚钱的教程，我写文章的初衷是分享一些有意思的工具、软件、想法等。欢迎各位志同道合，爱折腾的朋友一起探讨。</p>
<a id="more"></a>
<h4 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br></pre></td></tr></table></figure>
<h4 id="拉取Docker镜像并启动"><a href="#拉取Docker镜像并启动" class="headerlink" title="拉取Docker镜像并启动"></a>拉取Docker镜像并启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name=wxedge \</span><br><span class="line">  --restart=always --privileged --net=host \</span><br><span class="line">  --tmpfs /run --tmpfs /tmp \</span><br><span class="line">  -v /data/wxedge_storage:/storage:rw  \</span><br><span class="line">  onething1/wxedge</span><br></pre></td></tr></table></figure>
<p>注意：/data/wxedge_storage需要改成自己的本地路径（<em>当然不该也行</em>）</p>
<h4 id="多实例"><a href="#多实例" class="headerlink" title="多实例"></a>多实例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -e LISTEN_ADDR=<span class="string">":28888"</span> --name=wxedge2 \</span><br><span class="line">  --restart=always --privileged --net=host \</span><br><span class="line">  --tmpfs /run --tmpfs /tmp \</span><br><span class="line">  -v /home/zyhahaha/wxy:/storage:rw  \</span><br><span class="line">  onething1/wxedge</span><br></pre></td></tr></table></figure>
<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><pre><code>注册网心云：这个是拉新链接，邀请人和被邀请人均可获得优惠券
https://act.walk-live.com/acts/invite?inviteid=51845cd2

安装网心云：
可到应用市场下载，也可以通过上面的链接注册下载。

官网：
https://www.onethingcloud.com/
</code></pre><h3 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h3><p>安装完App后，浏览器访问<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://你服务器IP:18888</span><br></pre></td></tr></table></figure></p>
<p>会出现下面的界面，再通过App扫一扫浏览器的二维码添加设备。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/pcdn/qrcode.jpg" alt="浏览器打开 IP:18888"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/pcdn/scan.jpg" alt="App扫一扫"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/pcdn/device.jpg" alt="设备列表"></p>
<h3 id="特别提示"><a href="#特别提示" class="headerlink" title="特别提示"></a>特别提示</h3><p>App上推荐的产品统统不要买，包括各种硬件设备，就跟以前的玩客云一样。<br>想玩就玩<strong>X86 Docker</strong>版（<em>官方叫法：容器魔方</em>），也就是本文介绍的这种部署方式，不用买设备，直接用闲置服务器跑。</p>
<h3 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h3><p><a href="https://hub.docker.com/r/onething1/wxedge" target="_blank" rel="noopener">https://hub.docker.com/r/onething1/wxedge</a></p>
<h3 id="阮一峰Docker教程"><a href="#阮一峰Docker教程" class="headerlink" title="阮一峰Docker教程"></a>阮一峰Docker教程</h3><p><a href="https://ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">https://ruanyifeng.com/blog/2018/02/docker-tutorial.html</a></p>
]]></content>
      <categories>
        <category>个人爱好</category>
      </categories>
      <tags>
        <tag>PCDN</tag>
      </tags>
  </entry>
  <entry>
    <title>PC主机配件介绍及组装</title>
    <url>/pc.html</url>
    <content><![CDATA[<p>计算机，既然靠着它挣钱，那我们是不是要对它有所了解，下面简单介绍一下，也是对相关知识的归纳。<br>计算机主要组成部分：电源、主板、CPU、内存、硬盘<br>CPU分为不同平台，各平台不通用：775、1366、1155、1150、1151（<em>按照时间顺序从先到后排序</em>）</p>
<a id="more"></a>
<p>未完待续，有时间再写</p>
]]></content>
      <categories>
        <category>个人爱好</category>
      </categories>
      <tags>
        <tag>PC</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Markdown语法</title>
    <url>/hexo-guide.html</url>
    <content><![CDATA[<p>Markdown语法</p>
<h3 id="代办列表"><a href="#代办列表" class="headerlink" title="代办列表"></a>代办列表</h3><ul>
<li style="list-style: none"><input type="checkbox"> 不勾选</li>
<li style="list-style: none"><input type="checkbox" checked> 勾选</li>
</ul>
<a id="more"></a>
<h4 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h4><p><a href="www.baidu.com">百度</a></p>
<h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><p><img src="http://mouapp.com/Mou_128.png" alt="icon"></p>
<p><strong>粗体</strong></p>
<p><em>斜体</em></p>
<h4 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<h4 id="多行代码框"><a href="#多行代码框" class="headerlink" title="多行代码框"></a>多行代码框</h4><pre><code>第一行
第二行
第三行
</code></pre><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><hr>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><table>
<thead>
<tr>
<th>Tables</th>
<th style="text-align:center">Are</th>
<th style="text-align:right">Cool</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 3 is</td>
<td style="text-align:center">right-aligned</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><ul>
<li>1</li>
<li>2</li>
<li>3</li>
</ul>
<h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><ol>
<li>1</li>
<li>2</li>
<li>3</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>qBittorrent安装（Debian 11 OR Ubuntu18）</title>
    <url>/qBittorrent.html</url>
    <content><![CDATA[<p>想一想这种场景：有一个Torrent资源大小为<strong>3.5GB</strong>，下载速度为<strong>62kb/s ~ 12kb/s</strong>，而且这个资源我们势在必得（<em>哈哈</em>）。<br>这种情况下，我们怎么办，电脑开着挂机下载？可以，但是乐观估计需要开一天一夜，有点浪费。</p>
<p>如果我们有云服务器的话，这个时候我们可以通过云服务器挂机下载。</p>
<p>Linux下有很多Torrent下载软件，这里我使用的是<strong>qBittorrent</strong>，对我而言它主要是可以支持Web网页进行下载操作，而且容易配置，最最重要的是它支持<strong>Web Api</strong>，这个功能提供了很多有趣的玩法！</p>
<p>下面是安装步骤：</p>
<h3 id="安装qBittorrent"><a href="#安装qBittorrent" class="headerlink" title="安装qBittorrent"></a>安装qBittorrent</h3><p>安装add-apt-repository命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install software-properties-common -y</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>添加qbittorrent-nox的PPA软件源<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># qBittorrent 稳定版</span></span><br><span class="line">sudo add-apt-repository ppa:qbittorrent-team/qbittorrent-stable</span><br><span class="line"></span><br><span class="line"><span class="comment"># qBittorrent 测试版</span></span><br><span class="line">sudo add-apt-repository ppa:qbittorrent-team/qbittorrent-unstable</span><br></pre></td></tr></table></figure></p>
<p>安装qbittorrent-nox<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install qbittorrent-nox -y</span><br></pre></td></tr></table></figure></p>
<!-- more -->
<p>设置开机启动<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vim -y &amp;&amp; vim /etc/systemd/system/qbittorrent-nox.service</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=qBittorrent-nox</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">User=root</span><br><span class="line">Type=forking</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">ExecStart=/usr/bin/qbittorrent-nox -d</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>修改qbittorrent-nox.service文件后重新载入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure></p>
<p>启动<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start qbittorrent-nox</span><br></pre></td></tr></table></figure></p>
<p>停止<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop qbittorrent-nox</span><br></pre></td></tr></table></figure></p>
<p>设置开机启动<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> qbittorrent-nox</span><br></pre></td></tr></table></figure></p>
<p>查看状态<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl status qbittorrent-nox</span><br></pre></td></tr></table></figure></p>
<p>默认账号：admin 密码：adminadmin</p>
<p>默认登陆网址：ip:8080</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/qBittorrent/web-ui.jpg" alt="DNS解析"></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>你可能会好奇，我们安装的不是<em>qbittorrent</em>吗，怎么安装命令是<em>qbittorrent-nox</em>。<br>解释一下这个<strong>nox</strong>就是<strong>No x-server</strong>，因为qbittorrent是默认使用x-server提供图形界面服务的，想要使用Web版，还要关闭、配置，太麻烦，这里我们干脆直接使用nox版本。</p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>有问题可以发我邮箱：<a href="mailto:980355088@qq.com" target="_blank" rel="noopener">980355088@qq.com</a><br>或者在我<a href="https://cv.123123.store/message.html" target="_blank" rel="noopener">个人主页</a>留言</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Torrent</tag>
      </tags>
  </entry>
  <entry>
    <title>scrcpy安卓投屏神器（可电脑操作手机）</title>
    <url>/scrcpy.html</url>
    <content><![CDATA[<p>scrcpy可以通过<strong>adb调试</strong>的方式把安卓手机屏幕投放到电脑上，并且可以<strong>操作手机</strong>。<br>它<strong>不需要Root权限</strong>，不需要在手机安装任何软件，支持Windows、MacOS、Linux操作系统。</p>
<p>连接方式有两种：<strong>USB有线连接</strong>、<strong>Wifi无线连接</strong></p>
<p>适用场景：</p>
<ol>
<li>手机屏幕坏了看不清，通过电脑连接手机进行备份操作；</li>
<li>上班摸鱼不方便拿手机，通过scrcpy把手机投放到电脑上，装作在电脑上工作其实是在玩手机；</li>
<li>当你有电脑操作手机的需求时；</li>
</ol>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul>
<li>电脑下载scrcpy软件（<a href="https://github.com/Genymobile/scrcpy）" target="_blank" rel="noopener">https://github.com/Genymobile/scrcpy）</a></li>
<li>安卓5.0以上，打开<strong>开发者选项</strong>，打开<strong>USB调试</strong></li>
<li>USB连接电脑，手机同意USB调试，信任此电脑</li>
</ul>
<a id="more"></a>
<h5 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h5><p>到Github下载你对应平台的安装包<br><a href="https://github.com/Genymobile/scrcpy" target="_blank" rel="noopener">https://github.com/Genymobile/scrcpy</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/scrcpy/github.jpg" alt="下载"></p>
<p>这里我以windows平台为例，解压到本地：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/scrcpy/software.jpg" alt="scrcpy软件"></p>
<h3 id="配置手机"><a href="#配置手机" class="headerlink" title="配置手机"></a>配置手机</h3><p>首先准备一个安卓5.0以上的手机（<em>现在的手机基本支持</em>），打开<strong>开发者选项</strong>（怎么打开就不细说了，很简单自行百度），打开<strong>USB调试</strong>。<br>如果在后续投屏时电脑无法操作手机，可能是你手机还有个<strong>USB模拟点击</strong>选项，这个选项也要打开。</p>
<h3 id="开始投屏（有线连接）"><a href="#开始投屏（有线连接）" class="headerlink" title="开始投屏（有线连接）"></a>开始投屏（有线连接）</h3><p>手机usb连接电脑，cmd进入scrcpy文件夹目录<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># adb查看设备</span></span><br><span class="line">adb.exe devices</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始投屏</span></span><br><span class="line">scrcpy.exe</span><br></pre></td></tr></table></figure></p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/scrcpy/cmd.jpg" alt="cmd"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/scrcpy/phone.jpg" alt="phone"></p>
<p>快捷键：</p>
<ol>
<li>Alt + O 手机息屏，电脑继续控制手机（<em>摸鱼更安心</em>）</li>
<li>Alt + F 切换全屏</li>
<li>Alt + 上下键  调节音量</li>
</ol>
<h3 id="无线连接（WIFI）"><a href="#无线连接（WIFI）" class="headerlink" title="无线连接（WIFI）"></a>无线连接（WIFI）</h3><p>无线连接的前提是已经有线连接过设备，并且手机与电脑在同一局域网下，以上操作成功后按Ctrl + C结束投屏。<br>下面开始通过WIFI无线操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到你手机的IP地址，确认在同一局域网下 比如你手机的IP地址为192.168.0.69</span></span><br><span class="line">ping 192.168.0.69</span><br><span class="line"></span><br><span class="line">adb tcpip 5555</span><br><span class="line"></span><br><span class="line">adb connect 192.168.0.69:5555</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拔下数据线，输入以下命令，如果能发现刚刚添加的192.168.0.69设备，说明设备可投屏</span></span><br><span class="line">adb devices</span><br><span class="line"></span><br><span class="line">scrcpy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当有多个手机时，通过指定ip连接对应的手机</span></span><br><span class="line"><span class="comment"># scrcpy --tcpip=192.168.0.69</span></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/scrcpy/wifi-connect.jpg" alt="WIFI连接"></p>
<h3 id="adb玩法"><a href="#adb玩法" class="headerlink" title="adb玩法"></a>adb玩法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># adb连接后</span></span><br><span class="line">adb shell</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前分辨率</span></span><br><span class="line">wm size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改分辨率</span></span><br><span class="line">wm size 720x1280</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前dpi</span></span><br><span class="line">wm density</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改dpi</span></span><br><span class="line">wm density 320</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置回默认值：分辨率、dpi</span></span><br><span class="line">wm size reset</span><br><span class="line">wm density reset</span><br></pre></td></tr></table></figure>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>更多功能持续探索中</p>
]]></content>
      <categories>
        <category>个人爱好</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Web项目服务器部署</title>
    <url>/server-deploy.html</url>
    <content><![CDATA[<p>代码写完了如何部署到服务器上？这对于每位开发者而言都是一项必备技能，本文主要对项目部署流程简述一下，也是对所学知识的归纳总结。</p>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul>
<li>必备：服务器、域名（国内需备案）、DNS解析服务商</li>
<li>非必备：CDN服务商、HTTPS证书（<a href="https://zyhahaha.github.io/ssl.html">SSL</a>）</li>
</ul>
<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul>
<li>在Linux环境下的前端静态资源部署；</li>
<li>CDN加速；</li>
<li>HTTPS证书部署；</li>
</ul>
<a id="more"></a>
<h3 id="DNS域名解析"><a href="#DNS域名解析" class="headerlink" title="DNS域名解析"></a>DNS域名解析</h3><p>域名可以到各大<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">域名提供商</a>那购买，这里就不详细说明。有了域名之后需要把域名解析到服务器上，这样用户才能访问我们部署在服务器上的资源，我用的是阿里云的<a href="https://dns.console.aliyun.com/#/pdns/dashboard" target="_blank" rel="noopener">DNS解析服务</a>，每个月有一定的<strong>免费额度</strong>，对于普通用户来说完全够用。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/server-deploy/server-deploy-dns.jpg" alt="DNS解析"></p>
<p>可以看到子域名、CDN这些都需要用到DNS解析，而且还可以把域名解析到<strong>Ipv6</strong>地址上（<em>这个功能大家能想到啥？</em>）感兴趣可以看我<a href="https://zyhahaha.github.io/linux-deploy.html">另一篇博客</a>通过Ipv6手机提供公网访问。</p>
<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>通过DNS服务把域名解析到我们的服务器上面，那么我们要怎么提供Web服务呢，这里就要用到Nginx Web服务，下面简单说一下配置步骤：</p>
<ol>
<li><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/nginx/conf.d</span><br><span class="line">$ vim sites.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name zyhahaha.github.io;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">          root /home/zyhahaha/sites/zyhahaha.github.io;</span><br><span class="line">          index   index.html index.htm;</span><br><span class="line">          try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ @rewrites;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location @rewrites &#123;</span><br><span class="line">          rewrite ^(.*)$ /index.html last;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>不知道大家买的云服务器是多少带宽，我买的是8M带宽的腾讯云服务器，换算成流量就是<strong>1MB/s</strong>，一个网页除了媒体资源外，<strong>200KB ~ 2MB</strong>不定。就按1MB算，一台用户访问响应时间约一秒，如果并发太多，就是N+1秒的响应时间，对用户体验极为不好。</p>
<p>一般我们的前端静态资源都不会到自己的业务服务器上，往往是放到CDN服务器里（<em>不管是用CDN服务商提供的，还是自己搭建的</em>），还可以做到隐藏业务服务器的IP，一定程度上防止被攻击。</p>
<p>关于CDN服务，这里推荐使用七牛云的<a href="https://portal.qiniu.com/cdn/overview" target="_blank" rel="noopener">CDN服务</a>，每个月有10GB的免费额度</p>
<h3 id="HTTPS部署"><a href="#HTTPS部署" class="headerlink" title="HTTPS部署"></a>HTTPS部署</h3><p>关于HTTPS部署我最近专门开了<a href="https://zyhahaha.github.io/ssl.html">一篇文章</a>叙述，大家感兴趣的可以去看一下。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>拥有一台Root的安卓手机之虚拟机（VMOS）</title>
    <url>/vmphone.html</url>
    <content><![CDATA[<p><strong>Root</strong>后的手机有什么好处，解释起来有点颇费口舌，只能用一句话概况：懂的自然懂，能搜到这篇文章的大多数应该是有这方面需求的。</p>
<p>但是现在的手机基本很难Root了，这里为有这方面需求的使用者介绍一款软件<strong>VMOS</strong>，它是运行在安卓手机上的一款<strong>虚拟机软件</strong>。</p>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ol>
<li>安卓手机（<em>64位处理器</em>）</li>
<li>虚拟机软件VMOS（公众号输入：<strong>虚拟机</strong>，获取下载链接）</li>
</ol>
<a id="more"></a>
<p>直接安装运行即可，这里说一下它的应用场景：<br>游戏辅助脚本、<strong>虚拟定位</strong>、<strong>谷歌服务</strong>、国外应用等</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/vmphone/desktop.jpg" alt="虚拟机桌面"></p>
<h5 id="场景一：运行游戏脚本"><a href="#场景一：运行游戏脚本" class="headerlink" title="场景一：运行游戏脚本"></a>场景一：运行游戏脚本</h5><p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/vmphone/game.png" alt="运行游戏脚本"></p>
<p>再举个例子：<br>众所周知国外版抖音（<strong>TikTok</strong>）正常情况下在我们手机上是运行不起来的，运行不起来的原因不言而喻。<br>那运行不起来的原理是什么：</p>
<ol>
<li>网络环境不支持</li>
<li>使用地区不支持</li>
</ol>
<p>网络环境如何解决？答案是科学上网。<br>上面说到虚拟机支持<strong>虚拟定位</strong>，第二个使用地区不支持的问题也迎刃而解。</p>
<p>如何修改定位，点击右侧的悬浮球打开设置 -&gt; 国家 -&gt; 修改</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/vmphone/setting.jpg" alt="设置"><br><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/vmphone/region.jpg" alt="地区"><br><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/vmphone/tiktok.jpg" alt="TikTok"></p>
<p>最后，比如你的位置修改为韩国，网络记得也要一一对应，网络代理也要代理到韩国</p>
]]></content>
      <categories>
        <category>个人爱好</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>网站HTTPS部署（Nginx）</title>
    <url>/ssl.html</url>
    <content><![CDATA[<p>目前绝大多数的网站都已使用<strong>HTTPS协议</strong>，如果我们的个人站点还在使用HTTP协议，就不说啥安全性问题，光是浏览器地址栏有个不安全的标志，看起来也让用户觉得很不靠谱的样子。<br>想要部署HTTPS，首先要有一个<strong>SSL证书</strong>，如果网站想要做PWA或者使用HTTP2.0也必须部署SSL，这样看起来未来SSL证书还挺重要的。</p>
<h3 id="SSL证书类型"><a href="#SSL证书类型" class="headerlink" title="SSL证书类型"></a>SSL证书类型</h3><p>目前SSL证书是需要收费的，如果想要降低成本我们可以试用免费版的SSL证书，我使用的是<a href="https://www.joyssl.com/" target="_blank" rel="noopener">JoySSL</a>。<br>在部署SSL证书之前我们需要了解一下它各个类型的适用范围：<strong>单域名证书</strong>、<strong>通配符证书</strong>、<strong>多域名证书</strong>、<strong>IP地址证书</strong><br>对应的使用范围：<em>只能为单个子域名提供HTTPS服务</em>、<em>可以为一个主域名下的多个子域名提供服务</em>、<em>可以为多个主域名提供服务</em>、<em>IP地址证书没咋用过，不太了解</em><br>这里我使用的是<strong>通配符证书</strong>既：可以为一个主域名下的多个子域名提供HTTPS认证。</p>
<a id="more"></a>
<h3 id="通过JoySSL获取SSL证书"><a href="#通过JoySSL获取SSL证书" class="headerlink" title="通过JoySSL获取SSL证书"></a>通过JoySSL获取SSL证书</h3><p>在JoySSL注册登录，填写信息、下载SSL证书这些我就不细说了，没有什么难度，大家记得选择证书类型时要选择<strong>通配符证书</strong>，生成证书的时候需要验证域名的所有权，这个根据提示操作即可。<br>JoySSL会提供多种Web服务器的SSL证书及对应的部署文档，大家也可以按照部署文档操作。下面的操作就跟JoySSL没有关系了，如果是从其他服务商那获取到的证书也可以按照下面步骤操作。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/ssl/sign.jpg" alt="签发证书"></p>
<h3 id="配置SSL证书（Nginx）"><a href="#配置SSL证书（Nginx）" class="headerlink" title="配置SSL证书（Nginx）"></a>配置SSL证书（Nginx）</h3><p>这里我以Nginx为例，最后会得到两个文件，分别是 <em>.key</em>、<em>.crt</em>格式的。</p>
<ol>
<li>将证书文件和 KEY 文件都上传到服务器（推荐放到 etc/nginx/cert/文件夹下）</li>
<li>修改 nginx 配置文件如下(默认配置文件一般是在/etc/nginx/目录下)：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ssl配置</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name zyhahaha.github.io; <span class="comment">#修改为您证书绑定的域名。</span></span><br><span class="line">    ssl on; <span class="comment">#设置为 on 启用 SSL 功能。</span></span><br><span class="line">    root html;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">    ssl_certificate cert/123123_store_integrated.crt; <span class="comment">#替换成您证书的文件名。</span></span><br><span class="line">    ssl_certificate_key cert/123123_store.key; <span class="comment">#替换成您证书的密钥文件名。</span></span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers</span><br><span class="line">    ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; <span class="comment">#使用此加密套件。</span></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; <span class="comment">#使用该协议进行配置。</span></span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /home/zyhahaha/sites/zyhahaha.github.io; <span class="comment">#站点目录。</span></span><br><span class="line">        index index.html index.htm; <span class="comment">#添加属性。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>4、保存 nginx.conf 文件后退出。<br>5、重启 Nginx 服务。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></p>
<p>结束，配置完成，打开网站通过HTTPS协议访问，看看吧。</p>
<h3 id="HTTP重定向HTTPS"><a href="#HTTP重定向HTTPS" class="headerlink" title="HTTP重定向HTTPS"></a>HTTP重定向HTTPS</h3><p>你可能会发现，如果不指定协议浏览器会默认使用以前的协议访问网站，那么我们肯定是想，如果用户通过http协议访问网站，我们要把它重定向到https站点，配置如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name zyhahaha.github.io;</span><br><span class="line">    <span class="built_in">return</span> 301 https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>有问题可以发我邮箱：<a href="mailto:980355088@qq.com" target="_blank" rel="noopener">980355088@qq.com</a><br>或者在我<a href="https://cv.123123.store/message.html" target="_blank" rel="noopener">个人主页</a>留言</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt多环境配置</title>
    <url>/nuxt-env.html</url>
    <content><![CDATA[<p>Nuxt项目测试、生产<strong>环境变量配置</strong>，首先使用<a href="https://www.cnblogs.com/jiaoshou/p/12187504.html" target="_blank" rel="noopener">cross-env</a>（一款跨平台设置和使用环境变量的脚本）配置环境变量。</p>
<h4 id="第一步：修改package-json文件（通过cross-env添加环境变量MODE）"><a href="#第一步：修改package-json文件（通过cross-env添加环境变量MODE）" class="headerlink" title="第一步：修改package.json文件（通过cross-env添加环境变量MODE）"></a>第一步：修改package.json文件（通过cross-env添加环境变量MODE）</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "test-start": "cross-env MODE=test nuxt start",</span><br><span class="line">    "test": "cross-env MODE=test nuxt build",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="第二步：创建env-js文件（各环境配置字典）"><a href="#第二步：创建env-js文件（各环境配置字典）" class="headerlink" title="第二步：创建env.js文件（各环境配置字典）"></a>第二步：创建env.js文件（各环境配置字典）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    dev: &#123;</span><br><span class="line">        MODE: <span class="string">'dev'</span>,</span><br><span class="line">        ENV_API: <span class="string">'https://api.dev.cn'</span>,</span><br><span class="line">        ENV_OPEN_DOC_URL: <span class="string">'https://qwer.dev.cn'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    test: &#123;</span><br><span class="line">        MODE: <span class="string">'test'</span>,</span><br><span class="line">        ENV_API: <span class="string">'https://api.test.cn'</span>,</span><br><span class="line">        ENV_OPEN_DOC_URL: <span class="string">'https://qwer.test.cn'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    prod: &#123;</span><br><span class="line">        MODE: <span class="string">'prod'</span>,</span><br><span class="line">        ENV_API: <span class="string">'https://api.prod.cn'</span>,</span><br><span class="line">        ENV_OPEN_DOC_URL: <span class="string">'https://qwer.prod.cn'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第三步：修改nuxt-config-js文件（通过环境变量MODE，获取当前环境配置）"><a href="#第三步：修改nuxt-config-js文件（通过环境变量MODE，获取当前环境配置）" class="headerlink" title="第三步：修改nuxt.config.js文件（通过环境变量MODE，获取当前环境配置）"></a>第三步：修改nuxt.config.js文件（通过环境变量MODE，获取当前环境配置）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> env <span class="keyword">from</span> <span class="string">'./env'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    env: &#123;</span><br><span class="line">        NUXT_ENV: env[process.env.MODE]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第四步：如何在项目中使用"><a href="#第四步：如何在项目中使用" class="headerlink" title="第四步：如何在项目中使用"></a>第四步：如何在项目中使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    baseApiUrl () &#123;</span><br><span class="line">        <span class="keyword">return</span> process.env.NUXT_ENV.ENV_API</span><br><span class="line">    &#125;</span><br><span class="line">    baseSiteUrl () &#123;</span><br><span class="line">        <span class="keyword">return</span> process.env.NUXT_ENV.ENV_OPEN_DOC_URL</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"`$&#123;baseSiteUrl&#125;/images/defalut.png`"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="第五步：结束"><a href="#第五步：结束" class="headerlink" title="第五步：结束"></a>第五步：结束</h4>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Redroid Root</title>
    <url>/redroid-root.html</url>
    <content><![CDATA[<p>使用Redroid在服务器上搭建云手机<br><a href="https://hub.docker.com/r/redroid/redroid" target="_blank" rel="noopener">https://hub.docker.com/r/redroid/redroid</a></p>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul>
<li>云服务器</li>
<li>scrcpy的使用方法（<em>见我的另外一篇文章</em>）</li>
</ul>
<h3 id="我的环境（不代表其他环境不行）"><a href="#我的环境（不代表其他环境不行）" class="headerlink" title="我的环境（不代表其他环境不行）"></a>我的环境（不代表其他环境不行）</h3><ul>
<li>Ubuntu 20.04</li>
<li>4核8G内存云主机</li>
</ul>
<a id="more"></a>
<h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><h5 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y docker.io</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>
<h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install linux-modules-extra-`uname -r`</span><br><span class="line">sudo modprobe binder_linux devices=<span class="string">"binder,hwbinder,vndbinder"</span></span><br><span class="line">sudo modprobe ashmem_linux</span><br></pre></td></tr></table></figure>
<h5 id="安装adb"><a href="#安装adb" class="headerlink" title="安装adb"></a>安装adb</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install adb</span><br></pre></td></tr></table></figure>
<h3 id="adb连接"><a href="#adb连接" class="headerlink" title="adb连接"></a>adb连接</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果是远程机器，localhost改为对应的ip</span></span><br><span class="line">adb connect localhost:5555</span><br></pre></td></tr></table></figure>
<h3 id="安装scrcpy"><a href="#安装scrcpy" class="headerlink" title="安装scrcpy"></a>安装scrcpy</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># snap方式安装（snap安装比较慢）</span></span><br><span class="line">snap install scrcpy</span><br><span class="line"></span><br><span class="line"><span class="comment"># apt方式安装（版本比较旧）</span></span><br><span class="line">apt install scrcpy</span><br></pre></td></tr></table></figure>
<h3 id="scrcpy连接设备"><a href="#scrcpy连接设备" class="headerlink" title="scrcpy连接设备"></a>scrcpy连接设备</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单个设备连接</span></span><br><span class="line">scrcpy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多设备时通过指定ip连接</span></span><br><span class="line">scrcpy -s localhost:5555</span><br></pre></td></tr></table></figure>
<h3 id="Redroid安装完成，开始安装Magisk"><a href="#Redroid安装完成，开始安装Magisk" class="headerlink" title="Redroid安装完成，开始安装Magisk"></a>Redroid安装完成，开始安装Magisk</h3><p>参考文档：<a href="https://gist.github.com/assiless/a23fb52e8c6156db0474ee8973c4be66" target="_blank" rel="noopener">https://gist.github.com/assiless/a23fb52e8c6156db0474ee8973c4be66</a></p>
<h5 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"\n</span></span><br><span class="line"><span class="string">export image=redroid/redroid:11.0.0-latest</span></span><br><span class="line"><span class="string">export image_tar=<span class="variable">$&#123;HOME&#125;</span>/redroid:11.0.0-latest"</span> &gt;&gt; <span class="variable">$&#123;HOME&#125;</span>/.bashrc</span><br><span class="line"><span class="built_in">source</span> <span class="variable">$&#123;HOME&#125;</span>/.bashrc</span><br></pre></td></tr></table></figure>
<h5 id="使用docker安装"><a href="#使用docker安装" class="headerlink" title="使用docker安装"></a>使用docker安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">sudo docker pull <span class="variable">$image</span></span><br><span class="line"><span class="comment"># 导出镜像</span></span><br><span class="line">sudo docker save --output redroidBak.tar <span class="variable">$image</span></span><br><span class="line"><span class="comment"># sudo docker save --output redroidBak.tar redroid/redroid:11.0.0-latest</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除已更改的镜像</span></span><br><span class="line">sudo docker image rmi -f <span class="variable">$image</span></span><br><span class="line"><span class="comment"># 加载刚刚备份的镜像</span></span><br><span class="line">sudo docker load -i redroidBak.tar</span><br></pre></td></tr></table></figure>
<h5 id="Setting-Up"><a href="#Setting-Up" class="headerlink" title="Setting Up"></a>Setting Up</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir ~/MagiskOnRedroid</span><br><span class="line"><span class="built_in">cd</span> ~/MagiskOnRedroid</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载、提取Magisk</span></span><br><span class="line">find -maxdepth 1 -iname <span class="string">"magisk*"</span> -not -name <span class="string">"*.apk"</span> -<span class="built_in">exec</span> rm -r &#123;&#125; \;</span><br><span class="line">magisk_file=<span class="string">"app-debug.apk"</span></span><br><span class="line"><span class="comment"># download Magisk 9b61bdfc(25201) debug as you did i guess</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="variable">$magisk_file</span> ]; <span class="keyword">then</span></span><br><span class="line">  sudo wget <span class="string">"https://cdn.jsdelivr.net/gh/topjohnwu/magisk-files@1cea72840fbf690f9a95512d03721f6a710fe02e/app-debug.apk"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># because my machine x64 i will choose x86_64</span></span><br><span class="line">sudo unzip -j <span class="variable">$magisk_file</span> <span class="string">"lib/x86_64/libmagisk64.so"</span> -d magisk</span><br><span class="line">sudo unzip -j <span class="variable">$magisk_file</span> <span class="string">"lib/x86_64/libbusybox.so"</span> -d magisk</span><br><span class="line">sudo mv -v magisk/libmagisk64.so magisk/magisk</span><br><span class="line">sudo mv -v magisk/libbusybox.so magisk/busybo</span><br><span class="line"><span class="comment"># $ tree ~/MagiskOnRedroid</span></span><br><span class="line"><span class="comment"># .</span></span><br><span class="line"><span class="comment"># ├── app-debug.apk</span></span><br><span class="line"><span class="comment"># └── magisk</span></span><br><span class="line"><span class="comment">#     ├── busybox</span></span><br><span class="line"><span class="comment">#     └── magisk</span></span><br></pre></td></tr></table></figure>
<h5 id="compress-magisk（不知道是啥，直接执行）"><a href="#compress-magisk（不知道是啥，直接执行）" class="headerlink" title="compress magisk（不知道是啥，直接执行）"></a>compress magisk（不知道是啥，直接执行）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar --transform <span class="string">'s/.*\///g'</span> -cf ~/magisk.tar --absolute-names $( find ~/MagiskOnRedroid | grep -E <span class="string">"magisk/|app-debug.apk$"</span> )</span><br></pre></td></tr></table></figure>
<h5 id="remove-rc"><a href="#remove-rc" class="headerlink" title="remove.rc"></a>remove.rc</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;\EOF &gt; ~/remove.rc</span><br><span class="line">on early-init</span><br><span class="line">	<span class="built_in">export</span> PATH /sbin:/product/bin:/apex/com.android.runtime/bin:/apex/com.android.art/bin:/system_ext/bin:/system/bin:/system/xbin:/odm/bin:/vendor/bin:/vendor/xbin</span><br><span class="line">	chmod 0700 /magisk.tar</span><br><span class="line">	chown root root /magisk.tar</span><br><span class="line">	chmod 0700 /setup.sh</span><br><span class="line">	chown root root /setup.sh</span><br><span class="line">	<span class="built_in">exec</span> root root -- /setup.sh</span><br><span class="line">service magisk<span class="_">-d</span> /sbin/magisk --daemon</span><br><span class="line">	user root</span><br><span class="line">	oneshot</span><br><span class="line">on boot</span><br><span class="line">	start magisk<span class="_">-d</span></span><br><span class="line">on post-fs-data</span><br><span class="line">	start logd</span><br><span class="line">	rm /dev/.magisk-unblock</span><br><span class="line">	start s1</span><br><span class="line">	<span class="built_in">wait</span> /dev/.magisk-unblock 5</span><br><span class="line">	rm /dev/.magisk-unblock</span><br><span class="line">service s1 /sbin/magisk --post-fs-data</span><br><span class="line">	user root</span><br><span class="line">	oneshot</span><br><span class="line">service s2 /sbin/magisk --service</span><br><span class="line">	class late_start</span><br><span class="line">	user root</span><br><span class="line">	oneshot</span><br><span class="line">on property:sys.boot_completed=1</span><br><span class="line">	<span class="built_in">exec</span> /sbin/magisk --boot-complete</span><br><span class="line">on property:init.svc.zygote=restarting</span><br><span class="line">	<span class="built_in">exec</span> /sbin/magisk --zygote-restart</span><br><span class="line">on property:init.svc.zygote=stopped</span><br><span class="line">	<span class="built_in">exec</span> /sbin/magisk --zygote-restart</span><br><span class="line">EOF</span><br><span class="line">sudo chmod 644 ~/remove.rc</span><br><span class="line">sudo chown root:root ~/remove.rc</span><br></pre></td></tr></table></figure>
<h5 id="setup-sh"><a href="#setup-sh" class="headerlink" title="setup.sh"></a>setup.sh</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;\EOF &gt; ~/setup.sh</span><br><span class="line"><span class="meta">#!/system/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rm /system/fonts/NotoColorEmoji.ttf</span></span><br><span class="line">tmpPushed=/magisk</span><br><span class="line">rm -rf <span class="variable">$tmpPushed</span></span><br><span class="line">mkdir <span class="variable">$tmpPushed</span></span><br><span class="line">tar -xvf /magisk.tar --no-same-owner -C <span class="variable">$tmpPushed</span></span><br><span class="line">umount /magisk.tar ; rm -v /magisk.tar</span><br><span class="line">mkdir /sbin</span><br><span class="line">chown root:root /sbin</span><br><span class="line"><span class="comment"># chmod 0700 /sbin</span></span><br><span class="line">chmod 0751 /sbin</span><br><span class="line">cp <span class="variable">$tmpPushed</span>/magisk /sbin/</span><br><span class="line">cp <span class="variable">$tmpPushed</span>/app-debug.apk /sbin/stub.apk</span><br><span class="line">find /sbin -<span class="built_in">type</span> f -<span class="built_in">exec</span> chmod 0755 &#123;&#125; \;</span><br><span class="line">find /sbin -<span class="built_in">type</span> f -<span class="built_in">exec</span> chown root:root &#123;&#125; \;</span><br><span class="line"><span class="comment"># add /sbin</span></span><br><span class="line"><span class="comment"># /sbin/</span></span><br><span class="line"><span class="comment"># ├── magisk</span></span><br><span class="line"><span class="comment"># └── stub.apk</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ln -f -s /sbin/magisk /system/xbin/su</span><br><span class="line">mkdir /product/bin</span><br><span class="line">chmod 751 /product/bin</span><br><span class="line">ln -f -s /sbin/magisk /product/bin/su</span><br><span class="line"><span class="comment"># add su (override `/system/xbin/su`)</span></span><br><span class="line"><span class="comment"># /product/bin/</span></span><br><span class="line"><span class="comment"># └── su -&gt; /sbin/magisk</span></span><br><span class="line"></span><br><span class="line">mkdir -p /data/adb/magisk</span><br><span class="line">chmod 700 /data/adb</span><br><span class="line">mv <span class="variable">$tmpPushed</span>/busybox /data/adb/magisk/</span><br><span class="line">chmod -R 755 /data/adb/magisk</span><br><span class="line">chmod -R root:root /data/adb/magisk</span><br><span class="line"><span class="comment"># /data/adb/</span></span><br><span class="line"><span class="comment"># ├── magisk</span></span><br><span class="line"><span class="comment"># │   └── busybox</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rm -rf $tmpPushed</span></span><br><span class="line">EOF</span><br><span class="line">sudo chmod 700 ~/setup.sh</span><br><span class="line">sudo chown root:root ~/setup.sh</span><br></pre></td></tr></table></figure>
<h5 id="运行Magisk（boot-with-magisk-support）"><a href="#运行Magisk（boot-with-magisk-support）" class="headerlink" title="运行Magisk（boot with magisk support）"></a>运行Magisk（boot with magisk support）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">sudo docker stop a11</span><br><span class="line">clear</span><br><span class="line">sudo docker run -itd --rm --privileged \</span><br><span class="line">  --name a11 \</span><br><span class="line">  -v ~/data:/data \</span><br><span class="line">  -v ~/remove.rc:/vendor/etc/init/remove.rc \</span><br><span class="line">  -v ~/setup.sh:/setup.sh \</span><br><span class="line">  -v ~/magisk.tar:/magisk.tar \</span><br><span class="line">  -p 5555:5555 \</span><br><span class="line">  redroid/redroid:11.0.0-latest \</span><br><span class="line">  androidboot.hardware=mt6891 ro.secure=0 ro.boot.hwc=GLOBAL ro.ril.oem.imei=861503068361145 ro.ril.oem.imei1=861503068361145 ro.ril.oem.imei2=861503068361148 ro.ril.miui.imei0=861503068361148 ro.product.manufacturer=Xiaomi ro.build.product=chopin \</span><br><span class="line">  ro.product.cpu.abilist0=x86_64,arm64-v8a,x86,armeabi-v7a,armeabi \</span><br><span class="line">  ro.product.cpu.abilist64=x86_64,arm64-v8a \</span><br><span class="line">  ro.product.cpu.abilist32=x86,armeabi-v7a,armeabi \</span><br><span class="line">  ro.dalvik.vm.isa.arm=x86 \</span><br><span class="line">  ro.dalvik.vm.isa.arm64=x86_64 \</span><br><span class="line">  ro.enable.native.bridge.exec=1 \</span><br><span class="line">  ro.dalvik.vm.native.bridge=libndk_translation.so \</span><br><span class="line">  ro.ndk_translation.version=0.2.2 \</span><br><span class="line">  redroid.width=720 redroid.height=1280 \</span><br><span class="line">  redroid.gpu.mode=guest</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="安装应用"><a href="#安装应用" class="headerlink" title="安装应用"></a>安装应用</h3>]]></content>
      <categories>
        <category>个人爱好</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 拯救手册</title>
    <url>/windows-help.html</url>
    <content><![CDATA[<p>Windows常见问题修复方法，本文基于<strong>Win10</strong>出现的问题及其解决办法，其他版本可以作为参考</p>
<h4 id="误操作关闭资源管理器（explorer-exe）导致桌面崩溃"><a href="#误操作关闭资源管理器（explorer-exe）导致桌面崩溃" class="headerlink" title="误操作关闭资源管理器（explorer.exe）导致桌面崩溃"></a>误操作关闭资源管理器（explorer.exe）导致桌面崩溃</h4><p>打开文件时如果该文件过大、或者当前磁盘繁忙、用户连续点击打开文件、用户误操作关闭进程等行为，都会导致资源管理器无响应，着急的用户可能会直接去强制关闭资源管理器，这个时候可能就会出现桌面崩溃的情况。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/windows-help/windows-help-desktop-crash.jpg" alt="桌面崩溃"></p>
<a id="more"></a>
<p>这种情况大多数人可能直接重启电脑，但是如果电脑里正在运行一个不能关闭的程序，我们除了重启还有其他办法吗？下面介绍一下比重启更快、更安全的解决办法：<br>首先打开任务管理器（在没桌面的情况先使用键盘快捷键打开），点击文件 –&gt; 新任务 –&gt; 输入cmd，打开cmd界面 –&gt; 在cmd里输入explorer回车 –&gt; 解决问题，桌面程序重新打开</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/windows-help/windows-help-task.jpg" alt="任务管理器"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/windows-help/windows-help-cmd.jpg" alt="CMD"></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>VPN</title>
    <url>/vpn.html</url>
    <content><![CDATA[<p>vpn搭建</p>
<p>适用场景：</p>
<ol>
<li>局域网</li>
</ol>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul>
<li>云服务器</li>
</ul>
<a id="more"></a>
]]></content>
      <categories>
        <category>个人爱好</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Github为博客建个图床</title>
    <url>/%E5%9B%BE%E5%BA%8A.html</url>
    <content><![CDATA[<p>写博客的时候难免需要插入一些图片，这时候我们就需要一个自己的图床来存放。<br>我是使用Github托管图片资源，再通过cdn.jsdelivr访问。</p>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul>
<li>Github创建仓库存放图片</li>
</ul>
<a id="more"></a>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/图床/创建Github仓库.png" alt="Github创建仓库"></p>
<h5 id="创建完仓库后上传图片，再通过cdn-jsdelivr-net访问"><a href="#创建完仓库后上传图片，再通过cdn-jsdelivr-net访问" class="headerlink" title="创建完仓库后上传图片，再通过cdn.jsdelivr.net访问"></a>创建完仓库后上传图片，再通过cdn.jsdelivr.net访问</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/gh/你的账号名/你的仓库名@仓库分支/文件路径</span><br><span class="line"></span><br><span class="line">如：我的github账号是zyhahaha，资源仓库为assets，默认分支为master</span><br><span class="line">图片存放路径为：/images/blog/图床/创建Github仓库.png</span><br><span class="line"></span><br><span class="line">https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/图床/创建Github仓库.png</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>个人爱好</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Redroid搭建自己的云手机</title>
    <url>/redroid.html</url>
    <content><![CDATA[<p>最近玩游戏使用云手机比较多，正好手边有个<strong>闲置的云服务器</strong>，就想自己搭个<strong>云手机</strong>玩玩。</p>
<p>写这篇文章的时候，阿里云的<strong>无影云电脑</strong>可以<strong>免费试用三个月</strong>，配置是<strong>4核8G的Ubuntu20</strong>系统（<em>Amd64架构</em>）。目前在闲置着，于是拿来折腾一下。</p>
<p>搭建云手机使用的是<strong>Redroid</strong>方案，通过<strong>Docker</strong>部署，再通过<strong>Scrcpy</strong>远程连接控制云手机。</p>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul>
<li>云服务器（建议2C4G以上）<em>Amd64、Arm架构都行，Arm架构最佳</em></li>
<li>Scrcpy的使用方法</li>
</ul>
<h3 id="我的环境"><a href="#我的环境" class="headerlink" title="我的环境"></a>我的环境</h3><ul>
<li>Ubuntu 20.04</li>
<li>4核8G内存4M带宽（<em>Amd64架构</em>）</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Docker Hub地址：</span><br><span class="line">https://hub.docker.com/r/redroid/redroid</span><br><span class="line"></span><br><span class="line">在Windows10上安装：</span><br><span class="line">https://github.com/remote-android/redroid-doc/blob/master/deploy/wsl.md</span><br><span class="line"></span><br><span class="line">参考博客：</span><br><span class="line">https://blog.hanlin.press/2022/08/play-redroid-on-oracle-cloud/</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="一、开始安装"><a href="#一、开始安装" class="headerlink" title="一、开始安装"></a>一、开始安装</h3><h5 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y docker.io</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>
<h5 id="docker镜像（可选）"><a href="#docker镜像（可选）" class="headerlink" title="docker镜像（可选）"></a>docker镜像（可选）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用docker安装redroid太慢时，可以修改镜像源试试（不保证有效）</span></span><br><span class="line">sudo vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">"registry-mirrors"</span>: [<span class="string">"https://docker.mirrors.tuna.tsinghua.edu.cn"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install linux-modules-extra-`uname -r`</span><br><span class="line">sudo modprobe binder_linux devices=<span class="string">"binder,hwbinder,vndbinder"</span></span><br><span class="line">sudo modprobe ashmem_linux</span><br></pre></td></tr></table></figure>
<h5 id="安装adb"><a href="#安装adb" class="headerlink" title="安装adb"></a>安装adb</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install adb</span><br></pre></td></tr></table></figure>
<h5 id="安装scrcpy"><a href="#安装scrcpy" class="headerlink" title="安装scrcpy"></a>安装scrcpy</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># snap方式安装（snap安装比较慢）</span></span><br><span class="line">snap install scrcpy</span><br><span class="line"></span><br><span class="line"><span class="comment"># apt方式安装（版本比较旧）</span></span><br><span class="line">apt install scrcpy</span><br></pre></td></tr></table></figure>
<h3 id="二、运行docker-安装redroid"><a href="#二、运行docker-安装redroid" class="headerlink" title="二、运行docker 安装redroid"></a>二、运行docker 安装redroid</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -itd --rm --privileged \</span><br><span class="line">    --pull always \</span><br><span class="line">    -v ~/data:/data \</span><br><span class="line">    -p 5555:5555 \</span><br><span class="line">    redroid/redroid:11.0.0-latest</span><br></pre></td></tr></table></figure>
<p>如果需要给云手机加一些<strong>手机属性</strong>，让云手机更像手机来规避一些游戏的风控，可以执行下面的命令来<strong>启动容器</strong>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -itd --rm --memory-swappiness=0 \</span><br><span class="line">    --privileged --pull always \</span><br><span class="line">    -v /data:/data \</span><br><span class="line">    -p 5555:5555 \</span><br><span class="line">    redroid/redroid:11.0.0-latest \</span><br><span class="line">    androidboot.hardware=mt6891 ro.secure=0 ro.boot.hwc=GLOBAL ro.ril.oem.imei=861503068361145 ro.ril.oem.imei1=861503068361145 ro.ril.oem.imei2=861503068361148 ro.ril.miui.imei0=861503068361148 ro.product.manufacturer=Xiaomi ro.build.product=chopin \</span><br><span class="line">    redroid.width=720 redroid.height=1280 \</span><br><span class="line">    redroid.gpu.mode=guest</span><br></pre></td></tr></table></figure>
<p>这个镜像约<strong>800MB左右</strong>，如果在拉取镜像的时候有网络问题（<em>dockerhub国内网速比较慢</em>）导致拉取失败，可以在我公众号内（赵小福）留言：<strong>redroid镜像</strong>，来获取redroid的docker镜像。</p>
<p>获取镜像后可以本地导入，不用再远程拉取，不会的可以私信我出教程。</p>
<h3 id="三、使用adb连接"><a href="#三、使用adb连接" class="headerlink" title="三、使用adb连接"></a>三、使用adb连接</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果是远程机器，localhost改为对应的ip</span></span><br><span class="line">adb connect localhost:5555</span><br></pre></td></tr></table></figure>
<h3 id="四、scrcpy连接设备"><a href="#四、scrcpy连接设备" class="headerlink" title="四、scrcpy连接设备"></a>四、scrcpy连接设备</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单个设备连接</span></span><br><span class="line">scrcpy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多设备时通过指定ip连接</span></span><br><span class="line">scrcpy -s localhost:5555</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/redroid/start.jpg" alt="连接成功，启动Redroid"></p>
<h3 id="五、安装应用"><a href="#五、安装应用" class="headerlink" title="五、安装应用"></a>五、安装应用</h3><p>安装应用直接把apk文件拖放到 scrcpy 窗口安装即可，这时终端会输出一条日志。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/redroid/安装应用.jpg" alt="安装应用"></p>
<h5 id="从底部向上拉打开应用列表"><a href="#从底部向上拉打开应用列表" class="headerlink" title="从底部向上拉打开应用列表"></a>从底部向上拉打开应用列表</h5><p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/redroid/上拉.png" alt="打开应用列表"></p>
<h3 id="六、Redroid安装完成，开始安装Magisk，管理云手机Root权限"><a href="#六、Redroid安装完成，开始安装Magisk，管理云手机Root权限" class="headerlink" title="六、Redroid安装完成，开始安装Magisk，管理云手机Root权限"></a>六、Redroid安装完成，开始安装Magisk，管理云手机Root权限</h3><p>如果想管理云手机的<strong>Root权限</strong>，可以<strong>刷入Magisk</strong>（<em>面具</em>）来给需要Root权限的App授权。</p>
<p>通过下面的<strong>参考文档</strong>可以很容易的安装<strong>Magisk</strong>，如果不会搞的话<strong>给我留言</strong>，我后面再出个Root的文章。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参考文档：</span><br><span class="line">https://gist.github.com/assiless/a23fb52e8c6156db0474ee8973c4be66</span><br></pre></td></tr></table></figure>
<h5 id="Magisk安装成功"><a href="#Magisk安装成功" class="headerlink" title="Magisk安装成功"></a>Magisk安装成功</h5><p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/redroid/magisk.jpg" alt="Magisk"></p>
<h5 id="安装Devcheck查看手机配置"><a href="#安装Devcheck查看手机配置" class="headerlink" title="安装Devcheck查看手机配置"></a>安装Devcheck查看手机配置</h5><p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/redroid/devcheck.jpg" alt="Devcheck"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/redroid/devcheck-hardware.jpg" alt="硬件配置"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>阿里云的<strong>无影云电脑</strong>是一台<strong>amd64架构</strong>的计算机，其实搭建云手机最佳方案是使用<strong>Arm架构</strong>的服务器（<em>省去了amd64指令转arm的过程，性能好的不是一点半点</em>），但是目前国内云主机厂商的Arm架构服务器特别贵，而且也没有羊毛可以薅。</p>
<p>唯一可以用的是<strong>甲骨文</strong>的云服务器（<em><a href="https://cloud.oracle.com/" target="_blank" rel="noopener">https://cloud.oracle.com/</a></em>），它提供<strong>4核24G内存的Arm云主机</strong>，并且永久免费试用（<em>这配置搭建云手机吊打市面的真实手机</em>）。</p>
<p>但是由于<strong>太多人薅羊毛</strong>机器根本不够用，所以很难抢到，有感兴趣的可以去碰碰运气，注册账号的时候选择区域不要选择<strong>韩国、日本</strong>这些热门区域，根本抢不到资源。</p>
<p><strong>甲骨文账号注册提醒</strong>：需要准备一张支持外币支付的信用卡用于验证身份，很多银行都可以办理。并且不需要挂VPN代理，填写地址也要是真实地址（<em>建议是你的信用卡账单地址</em>）。</p>
<p>注册失败的话，可以连接手机网络，切换浏览器（<em>或者打开浏览器的无痕模式</em>）多试几次。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/oracle-cloud/vm.png" alt="Arm主机"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zyhahaha/assets@master/images/blog/oracle-cloud/config.png" alt="选择Arm实例"></p>
]]></content>
      <categories>
        <category>个人爱好</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
